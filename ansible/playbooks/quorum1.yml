---
- name: Настроить кворумную репликацию на два слейва. pg_master-primary pg_slave pg_asyncslave-secondary
  hosts: highload_servers
  become: true
  gather_facts: false

  vars:
    pg_admin_user: postgres
    pg_admin_password: postgres
    pg_db_name: user
    pg_hba_conf_path: /var/lib/postgresql/data/pg_hba.conf
    image_filters: '--filter ancestor=db:local --filter ancestor=app:local'
    application_properties_content: |
      spring.application.name=Highload Architect

      spring.datasource.url=jdbc:postgresql://pg_master:5432/user
      spring.datasource.username=postgres
      spring.datasource.password=postgres
      spring.datasource.driver-class-name=org.postgresql.Driver

      spring.datasource.secondary.url=jdbc:postgresql://pg_slave:5432/user
      spring.datasource.secondary.username=postgres
      spring.datasource.secondary.password=postgres
      spring.datasource.secondary.driver-class-name=org.postgresql.Driver

      spring.datasource.tertiary.url=jdbc:postgresql://pg_asyncslave:5432/user
      spring.datasource.tertiary.username=postgres
      spring.datasource.tertiary.password=postgres
      spring.datasource.tertiary.driver-class-name=org.postgresql.Driver
      
  tasks:
    - name: Установить ssl=off
      community.postgresql.postgresql_set:
        db: "{{ pg_db_name }}"
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        name: ssl
        value: off
      when: inventory_hostname in ['pg_master', 'pg_slave', 'pg_asyncslave']

    - name: Установить wal_level=replica
      community.postgresql.postgresql_set:
        db: "{{ pg_db_name }}"
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        name: wal_level
        value: replica
      when: inventory_hostname in ['pg_master', 'pg_slave', 'pg_asyncslave']

    - name: Установить max_wal_senders=20
      community.postgresql.postgresql_set:
        db: "{{ pg_db_name }}"
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        name: max_wal_senders
        value: 20
      when: inventory_hostname in ['pg_master', 'pg_slave', 'pg_asyncslave']

    - name: Получить подсеть pg_net
      command: docker network inspect pg_net
      register: network_info_raw
      delegate_to: localhost

    - name: Дать пользователю replicator доступ к сети в pg_hba.conf
      postgresql_pg_hba:
        dest: /var/lib/postgresql/data/pg_hba.conf
        contype: host
        users: replicator
        source: "{{ (network_info_raw.stdout | from_json)[0].IPAM.Config[0].Subnet }}"
        databases: replication
        method: md5
      when: inventory_hostname in ['pg_master', 'pg_slave', 'pg_asyncslave']
 
    - name: Создать standby.signal
      file:
        path: /var/lib/postgresql/data/standby.signal
        state: touch
        owner: postgres
        group: postgres
        mode: '0644'
      when: inventory_hostname in ['pg_slave', 'pg_asyncslave']
      
    - name: Установить conninfo pg_slave и pg_asyncslave
      community.postgresql.postgresql_set:
        db: "{{ pg_db_name }}"
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        name: primary_conninfo
        value: "host=pg_master port=5432 user=replicator password=pass application_name={{inventory_hostname}}"
      when: inventory_hostname in ['pg_slave', 'pg_asyncslave']  
      
    - name: Вывести conninfo
      debug:
        msg:
          - "host=pg_master port=5432 user=replicator password=pass application_name={{inventory_hostname}}"
      when: inventory_hostname in ['pg_slave', 'pg_asyncslave']  
      
    - name: Установить synchronous_commit на pg_master
      community.postgresql.postgresql_set:
        db: "{{ pg_db_name }}"
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        name: synchronous_commit
        value: "on"
      when: "'pg_master' in inventory_hostname"  
 
    - name: Установить synchronous_standby_names ANY на pg_master
      community.postgresql.postgresql_set:
        db: "{{ pg_db_name }}"
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        name: synchronous_standby_names
        value: "ANY 1 (pg_slave, pg_asyncslave)"
      when: "'pg_master' in inventory_hostname"   
 
    - name: Получить имена контейнеров для перезагрузки
      command: docker container ls -a {{ image_filters }} --format "{{ '{{' }}.Names {{ '}}' }} {{ '{{' }}.Image {{ '}}' }}"
      register: docker_images
      run_once: true
      delegate_to: localhost

    - name: Перезагрузка баз
      docker_container:
        name: "{{ item.split(' ')[0]}}"
        image: "{{ item.split(' ')[1]}}"
        state: started
        restart: yes
      loop: "{{ docker_images.stdout_lines}}"
      run_once: true
      delegate_to: localhost

    - name: Настроить application.properties
      copy:
        content: "{{ application_properties_content }}"
        dest: /BOOT-INF/classes/application.properties
      when: inventory_hostname in ['app']
      
    - name: Перезагрузка приложения
      docker_container:
        name: "app"
        image: "app:local"
        state: started
        restart: yes
      run_once: true
      delegate_to: localhost
      
    - name: Проверить pg_stat_replication
      community.postgresql.postgresql_query:
        db: "{{ pg_db_name }}"
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        query: "select application_name, sync_state from pg_stat_replication;"
      register: replication_status
      until: replication_status.query_result | length > 0
      retries: 30
      delay: 10
      when: "'pg_master' in inventory_hostname"

    - name: Вывести pg_stat_replication
      debug:
        msg:
          - "{{ replication_status.query_result }}"
      when: "'pg_master' in inventory_hostname"