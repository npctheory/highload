---
- name: Отключить pg_master. Сделать pg_slave primary. Перенастроить pg_asyncslave на новый primary.
  hosts: pg_servers
  become: true
  gather_facts: false

  vars:
    pg_admin_user: postgres
    pg_admin_password: postgres
    pg_db_name: user
    pg_hba_conf_path: /var/lib/postgresql/data/pg_hba.conf
    image_filters: '--filter ancestor=db:local --filter ancestor=app:local'
    application_properties_content: |
      spring.application.name=Highload Architect

      spring.datasource.url=jdbc:postgresql://pg_slave:5432/user
      spring.datasource.username=postgres
      spring.datasource.password=postgres
      spring.datasource.driver-class-name=org.postgresql.Driver

      spring.datasource.secondary.url=jdbc:postgresql://pg_slave:5432/user
      spring.datasource.secondary.username=postgres
      spring.datasource.secondary.password=postgres
      spring.datasource.secondary.driver-class-name=org.postgresql.Driver

      spring.datasource.tertiary.url=jdbc:postgresql://pg_slave:5432/user
      spring.datasource.tertiary.username=postgres
      spring.datasource.tertiary.password=postgres
      spring.datasource.tertiary.driver-class-name=org.postgresql.Driver

  tasks:
    - name: Настроить application.properties
      copy:
        content: "{{ application_properties_content }}"
        dest: /BOOT-INF/classes/application.properties
      when: inventory_hostname in ['app']
     
    - name: Удалить standby.signal на pg_slave
      file:
        path: /var/lib/postgresql/data/standby.signal
        state: absent
      when: inventory_hostname in ['pg_slave']
      
    - name: Убрать primary_conninfo из pg_slave
      community.postgresql.postgresql_set:
        db: "{{ pg_db_name }}"
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        name: primary_conninfo
        value: ""
      when: "'pg_slave' in inventory_hostname"
      
    - name: Настраиваем репликацию на pg_slave. synchronous_commit
      community.postgresql.postgresql_set:
        db: "{{ pg_db_name }}"
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        name: synchronous_commit
        value: "on"
      when: "'pg_slave' in inventory_hostname"  
 
    - name: Настраиваем репликацию на pg_slave. synchronous_standby_names=FIRST 1
      community.postgresql.postgresql_set:
        db: "{{ pg_db_name }}"
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        name: synchronous_standby_names
        value: "FIRST 1 (pg_asyncslave)"
      when: "'pg_slave' in inventory_hostname"   
      
    - name: Меняем postgresql.conf на pg_asyncslave. primary_conninfo
      community.postgresql.postgresql_set:
        db: "{{ pg_db_name }}"
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        name: primary_conninfo
        value: "host=pg_slave port=5432 user=replicator password=pass application_name=pg_slave"
      when: "'pg_asyncslave' in inventory_hostname"  

    - name: Останавливаем слейвы
      docker_container:
        name: "{{ inventory_hostname }}"
        state: stopped
      delegate_to: localhost
      run_once: true
      when: "'pg_master' not in inventory_hostname"  
      
    - name: Запускаем слейвы
      docker_container:
        name: "{{ inventory_hostname }}"
        state: started
      delegate_to: localhost
      run_once: true
      when: "'pg_master' not in inventory_hostname"        
      
    - name: Убеждаемся что pg_slave стал primary, а pg_asyncslave стал secondary
      community.postgresql.postgresql_query:
        db: "{{ pg_db_name }}"
        login_host: "{{ inventory_hostname }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        query: "select application_name, sync_state from pg_stat_replication;"
      register: replication_status
      until: replication_status.query_result | length > 0
      retries: 30
      delay: 10
      when: "'pg_slave' in inventory_hostname"

    - name: Вывести pg_stat_replication
      debug:
        msg:
          - "{{ replication_status.query_result }}"
      when: "'pg_slave' in inventory_hostname"